// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';
import { requestCache } from '@/utils/requestCache';

const SUPABASE_URL = "https://blhkytwedpmyqwwbhprq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsaGt5dHdlZHBteXF3d2JocHJxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI0MTA3MTcsImV4cCI6MjA1Nzk4NjcxN30.cRAq8OZHHoRAx76oT4riKCAP8WojYjnfk3ULrnevuvA";

// Configure client with exponential backoff for retries
const supabaseOptions = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  global: {
    fetch: (...args) => {
      // Track request for rate limiting
      requestCache.trackRequest();
      
      // If we've hit rate limits, delay the request
      if (requestCache.shouldThrottle()) {
        return new Promise((resolve) => {
          // Random delay between 1-3 seconds to spread out requests
          const delay = Math.floor(Math.random() * 2000) + 1000;
          setTimeout(() => resolve(fetch(...args)), delay);
        }).then(response => response);
      }
      
      return fetch(...args);
    }
  }
};

// Create a single client - no need for admin client anymore since RLS is disabled
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions);

// Keep the adminSupabase export for backward compatibility so we don't break existing code
export const adminSupabase = supabase;

// Helper function to handle Supabase errors
export const handleSupabaseError = (error: any, defaultMessage = "Erro ao conectar com o servidor") => {
  console.error("Supabase error:", error);
  
  // Handle specific error codes
  if (error?.code === "PGRST301") {
    toast.error("Erro de autenticação. Por favor, tente novamente.");
  } else if (error?.message?.includes("connection")) {
    toast.error("Erro de conexão com o servidor. Por favor, verifique sua internet.");
  } else if (error?.code === "429") {
    toast.error("Muitas requisições. Por favor, aguarde um momento e tente novamente.");
  } else {
    toast.error(error?.message || defaultMessage);
  }
  
  return error;
};
